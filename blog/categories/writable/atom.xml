<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: writable | Tony Chou's Blog]]></title>
  <link href="http://yoyzhou.github.com/blog/categories/writable/atom.xml" rel="self"/>
  <link href="http://yoyzhou.github.com/"/>
  <updated>2013-05-11T00:40:32+08:00</updated>
  <id>http://yoyzhou.github.com/</id>
  <author>
    <name><![CDATA[yoyzhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hadoop序列化与Writable接口(二)]]></title>
    <link href="http://yoyzhou.github.com/blog/2013/05/10/hadoop-serialization-and-writable-object-2/"/>
    <updated>2013-05-10T20:56:00+08:00</updated>
    <id>http://yoyzhou.github.com/blog/2013/05/10/hadoop-serialization-and-writable-object-2</id>
    <content type="html"><![CDATA[<p>上一篇文章<a href="/blog/2013/05/09/hadoop-serialization-and-writable-object-1/">Hadoop序列化与Writable接口（一）</a>介绍了Hadoop序列化，Hadoop Writable接口以及如何定制自己的Writable类，在本文中我们继续Hadoop Writable类的介绍，这一次我们关注的是Writable实例占用的空间大小，以及Writable实例在字节流中的结构。</p>

<h4 id="writable">为什么要考虑Writable类的字节长度</h4>

<p>大数据程序还需要考虑序列化对象占用磁盘空间的大小吗？也许你会认为<strong>大数据</strong>不是就是数据量很大吗，那磁盘空间一定是足够足够的大，一个序列化对象仅仅占用几个到几十个字节的空间，相对磁盘空间来说，当然是不需要考虑太多；如果你的磁盘空间不够大，还是不要玩大数据的好。</p>

<p>上面的观点没有什么问题，大数据应用自然需要足够的磁盘空间，但是能够尽量的考虑到不同Writable类占用磁盘空间的大小，高效的利用磁盘空间也未必就是没有必要的，选择适当的Writable类的另一个作用是<strong>通过减少Writable实例的字节数，可加快数据的读取和减少网络的数据传输。</strong></p>

<h4 id="writable-1">Writable类占用的字节长度</h4>

<p>下面的表格显示的是Hadoop对Java基本类型包装后相应的Writable类占用的字节长度：</p>

<table>
  <tbody>
    <tr>
      <td>Java基本类型</td>
      <td>Writable实现</td>
      <td>序列化后字节数 (bytes)</td>
    </tr>
    <tr>
      <td>boolean</td>
      <td>BooleanWritable</td>
      <td>1</td>
    </tr>
    <tr>
      <td>byte</td>
      <td>ByteWritable</td>
      <td>1</td>
    </tr>
    <tr>
      <td>short</td>
      <td>ShortWritable</td>
      <td>2</td>
    </tr>
    <tr>
      <td>int</td>
      <td>IntWritable</td>
      <td>4</td>
    </tr>
    <tr>
      <td> </td>
      <td>VIntWritable</td>
      <td>1–5</td>
    </tr>
    <tr>
      <td>float</td>
      <td>FloatWritable</td>
      <td>4</td>
    </tr>
    <tr>
      <td>long</td>
      <td>LongWritable</td>
      <td>8</td>
    </tr>
    <tr>
      <td> </td>
      <td>VLongWritable</td>
      <td>1–9</td>
    </tr>
    <tr>
      <td>double</td>
      <td>DoubleWritable</td>
      <td>8</td>
    </tr>
  </tbody>
</table>

<p>不同的Writable类序列化后占用的字数长度是不一样的，需要综合考虑应用中数据特征选择合适的类型。对于整数类型有两种Writable类型可以选择，一种是定长（fixed-length）Writable类型,IntWritable和LongWritable；另一种是变长（variable-length）Writable类型，VIntWritable和VLongWritable。定长类型顾名思义使用固定长度的字节数表示，比如一个IntWritable类型使用4个长度的字节表示一个int；变长类型则根据数值的大小使用相应的字节长度表示，当数值在-127～127之间时使用1个字节表示，在-112～127范围之外的数值使用头一个字节表示该数值的正负符号以及字节长度（zero-compressed encoded integer）。</p>

<p>定长的Writable类型适合数值均匀分布的情形，而变长的Writable类型适合数值分布不均匀的情形，一般情况下变长的Writable类型更节省空间，因为大多数情况下数值是不均匀的，对于整数类型的Writable选择，我建议：</p>

<blockquote>
  <p>1. 除非对数据的均匀分布很有把握，否则使用变长Writable类型</p>
</blockquote>

<blockquote>
  <p>2. 除非数据的取值区间确定在int范围之内，否则为了程序的可扩展性，请选择VLongWritable类型</p>
</blockquote>

<h4 id="writable-2">Writable实例的字节表示</h4>

<p>下面将以实例的方式演示Hadoop Writable对象占用的字节长度以及Writable对象序列化之后字节序列的结构，特别是变长Writable类型和自定义Writable对象。请看下面的代码和程序输出：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">yoyzhou</span><span class="o">.</span><span class="na">example</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.io.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.StringUtils</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Demos per how many bytes per each built-in Writable type takes and what does</span>
</span><span class='line'><span class="cm"> * their bytes sequences look like</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author yoyzhou</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WritableBytesLengthDemo</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="c1">// one billion representations by different Writable object</span>
</span><span class='line'>	<span class="n">IntWritable</span> <span class="n">int_b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1000000000</span><span class="o">);</span>
</span><span class='line'>	<span class="n">LongWritable</span> <span class="n">long_b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LongWritable</span><span class="o">(</span><span class="mi">1000000000</span><span class="o">);</span>
</span><span class='line'>	<span class="n">VIntWritable</span> <span class="n">vint_b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VIntWritable</span><span class="o">(</span><span class="mi">1000000000</span><span class="o">);</span>
</span><span class='line'>	<span class="n">VLongWritable</span> <span class="n">vlong_b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VLongWritable</span><span class="o">(</span><span class="mi">1000000000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="c1">// serialize writable object to byte array</span>
</span><span class='line'>	<span class="kt">byte</span><span class="o">[]</span> <span class="n">bs_int_b</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">int_b</span><span class="o">);</span>
</span><span class='line'>	<span class="kt">byte</span><span class="o">[]</span> <span class="n">bs_long_b</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">long_b</span><span class="o">);</span>
</span><span class='line'>	<span class="kt">byte</span><span class="o">[]</span> <span class="n">bs_vint_b</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">vint_b</span><span class="o">);</span>
</span><span class='line'>	<span class="kt">byte</span><span class="o">[]</span> <span class="n">bs_vlong_b</span> <span class="o">=</span> <span class="n">serialize</span><span class="o">(</span><span class="n">vlong_b</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="c1">// print byte array in hex string and their length</span>
</span><span class='line'>	<span class="n">String</span> <span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">bs_int_b</span><span class="o">);</span>
</span><span class='line'>	<span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;IntWritable&quot;</span><span class="o">,</span> <span class="n">hex</span><span class="o">,</span> <span class="n">bs_int_b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">bs_long_b</span><span class="o">);</span>
</span><span class='line'>	<span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;LongWritable&quot;</span><span class="o">,</span> <span class="n">hex</span><span class="o">,</span> <span class="n">bs_long_b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">bs_vint_b</span><span class="o">);</span>
</span><span class='line'>	<span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;VIntWritable&quot;</span><span class="o">,</span> <span class="n">hex</span><span class="o">,</span> <span class="n">bs_vint_b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">hex</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">byteToHexString</span><span class="o">(</span><span class="n">bs_vlong_b</span><span class="o">);</span>
</span><span class='line'>	<span class="n">formatPrint</span><span class="o">(</span><span class="s">&quot;VLongWritable&quot;</span><span class="o">,</span> <span class="n">hex</span><span class="o">,</span> <span class="n">bs_vlong_b</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">formatPrint</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">,</span> <span class="n">String</span> <span class="n">hex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">String</span> <span class="n">format</span> <span class="o">=</span> <span class="s">&quot;%1$-50s %2$-16s with length: %3$2d%n&quot;</span><span class="o">;</span>
</span><span class='line'>	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">format</span><span class="o">,</span> <span class="s">&quot;Byte array per &quot;</span> <span class="o">+</span> <span class="n">type</span>
</span><span class='line'>			<span class="o">+</span> <span class="s">&quot;(1,000,000,000) is:&quot;</span><span class="o">,</span> <span class="n">hex</span><span class="o">,</span> <span class="n">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Utility method to serialize Writable object, return byte array</span>
</span><span class='line'><span class="cm"> * representing the Writable object</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">serialize</span><span class="o">(</span><span class="n">Writable</span> <span class="n">writable</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">ByteArrayOutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>	<span class="n">DataOutputStream</span> <span class="n">dataOut</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataOutputStream</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class='line'>	<span class="n">writable</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">dataOut</span><span class="o">);</span>
</span><span class='line'>	<span class="n">dataOut</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="n">out</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Utility method to deserialize input byte array, return Writable object</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Writable</span> <span class="nf">deserialize</span><span class="o">(</span><span class="n">Writable</span> <span class="n">writable</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">)</span>
</span><span class='line'>		<span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">ByteArrayInputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayInputStream</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'>	<span class="n">DataInputStream</span> <span class="n">dataIn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataInputStream</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class='line'>	<span class="n">writable</span><span class="o">.</span><span class="na">readFields</span><span class="o">(</span><span class="n">dataIn</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">dataIn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">writable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
程序输出：</p>

<pre><code>Byte array per IntWritable(1,000,000,000) is:      3b9aca00         with length:  4
Byte array per LongWritable(1,000,000,000) is:     000000003b9aca00 with length:  8
Byte array per VIntWritable(1,000,000,000) is:     8c3b9aca00       with length:  5
Byte array per VLongWritable(1,000,000,000) is:    8c3b9aca00       with length:  5
</code></pre>

<p>从上面的输出我们可以看出：</p>

<p>+ 对1,000,000,000的表示不同的Writable占用了不同字节长度</p>

<p>+ 变长Writable类型并不总是比定长类型更加节省空间</p>

<p><code>---not finished yet---</code></p>

<!-- reference-like links -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop序列化与Writable接口(一)]]></title>
    <link href="http://yoyzhou.github.com/blog/2013/05/09/hadoop-serialization-and-writable-object-1/"/>
    <updated>2013-05-09T20:49:00+08:00</updated>
    <id>http://yoyzhou.github.com/blog/2013/05/09/hadoop-serialization-and-writable-object-1</id>
    <content type="html"><![CDATA[<h4 id="section">序列化</h4>

<p><strong>序列化</strong>（serialization）是指将结构化的对象转化为字节流，以便在网络上传输或者写入到硬盘进行永久存储；相对的<strong>反序列化</strong>（deserialization）是指将字节流转回到结构化对象的过程。</p>

<p>在分布式系统中进程将对象序列化为字节流，通过网络传输到另一进程，另一进程接收到字节流，通过反序列化转回到结构化对象，以达到进程间通信。在Hadoop中，Mapper，Combiner，Reducer等阶段之间的通信都需要使用序列化与反序列化技术。举例来说，Mapper产生的中间结果（<code>&lt;key: value1, value2...&gt;</code>）需要写入到本地硬盘，这是序列化过程（将结构化对象转化为字节流，并写入硬盘），而Reducer阶段读取Mapper的中间结果的过程则是一个反序列化过程（读取硬盘上存储的字节流文件，并转回为结构化对象），需要注意的是，能够在网络上传输的只能是字节流，Mapper的中间结果在不同主机间洗牌时，对象将经历序列化和反序列化两个过程。</p>

<p>序列化是Hadoop核心的一部分，在Hadoop中，位于org.apache.hadoop.io包中的Writable接口是Hadoop序列化格式的实现。</p>

<h4 id="writable">Writable接口</h4>

<p>Hadoop Writable接口是基于DataInput和DataOutput实现的序列化协议，紧凑（高效使用存储空间），快速（读写数据、序列化与反序列化的开销小）。Hadoop中的键（key）和值（value）必须是实现了Writable接口的对象（键还必须实现WritableComparable，以便进行排序）。</p>

<p>以下是Hadoop（使用的是Hadoop 1.1.2）中Writable接口的声明：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">hadoop</span><span class="o">.</span><span class="na">io</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.io.DataOutput</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.DataInput</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Writable</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/** </span>
</span><span class='line'><span class="cm">   * Serialize the fields of this object to &lt;code&gt;out&lt;/code&gt;.</span>
</span><span class='line'><span class="cm">   * </span>
</span><span class='line'><span class="cm">   * @param out &lt;code&gt;DataOuput&lt;/code&gt; to serialize this object into.</span>
</span><span class='line'><span class="cm">   * @throws IOException</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">DataOutput</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/** </span>
</span><span class='line'><span class="cm">   * Deserialize the fields of this object from &lt;code&gt;in&lt;/code&gt;.&lt;br /&gt;</span>
</span><span class='line'><span class="cm">   * </span>
</span><span class='line'><span class="cm">   * &amp;lt;p&amp;gt;For efficiency, implementations should attempt to re-use storage in the </span>
</span><span class='line'><span class="cm">   * existing object where possible.&amp;lt;/p&amp;gt;</span>
</span><span class='line'><span class="cm">   * </span>
</span><span class='line'><span class="cm">   * @param in &lt;code&gt;DataInput&lt;/code&gt; to deseriablize this object from.</span>
</span><span class='line'><span class="cm">   * @throws IOException</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">readFields</span><span class="o">(</span><span class="n">DataInput</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4 id="writable-1">Writable类</h4>

<p>Hadoop自身提供了多种具体的Writable类，包含了常见的Java基本类型（boolean、byte、short、int、float、long和double等）和集合类型（BytesWritable、ArrayWritable和MapWritable等）。这些类型都位于org.apache.hadoop.io包中。</p>

<p><img src="http://my.safaribooksonline.com/getfile?item=NDljc3NhNzlyOS9hNWRtNzY4dC8vcGlnMTUwczJlcnl0b3JldW9zcmNhb2VwZWNpaHRvL3R0c2xsbW1vcGkwbGdhZ2Uwbjh5aWwwbWUuMzNz" alt="writable-classes" /></p>

<p>(图片来源：safaribooksonline.com)</p>

<h4 id="writable-2">定制Writable类</h4>

<p>虽然Hadoop内建了多种Writable类提供用户选择，Hadoop对Java基本类型的包装Writable类实现的RawComparable接口，使得这些对象不需要反序列化过程，便可以在字节流层面进行排序，从而大大缩短了比较的时间开销，但是当我们需要更加复杂的对象时，Hadoop的内建Writable类就不能满足我们的需求了(需要注意的是Hadoop提供的Writable集合类型并没有实现RawComparable接口，因此也不满足我们的需要)，这时我们就需要定制自己的Writable类，特别将其作为键（key）的时候更应该如此，以求达到更高效的存储和快速的比较。</p>

<p>下面的实例展示了如何定制一个Writable类，一个定制的Writable类首先必须实现Writable或者WritableComparable接口，然后为定制的Writable类编写write(DataOutput out)和readFields(DataInput in)方法，来控制定制的Writable类如何转化为字节流（write方法）和如何从字节流转回为Writable对象。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">yoyzhou</span><span class="o">.</span><span class="na">weibo</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.io.DataInput</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.DataOutput</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.VLongWritable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Writable</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *This MyWritable class demonstrates how to write a custom Writable class </span>
</span><span class='line'><span class="cm"> * */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyWritable</span> <span class="kd">implements</span> <span class="n">Writable</span><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>	<span class="kd">private</span> <span class="n">VLongWritable</span> <span class="n">field1</span><span class="o">;</span>
</span><span class='line'>	<span class="kd">private</span> <span class="n">VLongWritable</span> <span class="n">field2</span><span class="o">;</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="nf">MyWritable</span><span class="o">(){</span>
</span><span class='line'>		<span class="k">this</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="n">VLongWritable</span><span class="o">(),</span> <span class="k">new</span> <span class="n">VLongWritable</span><span class="o">());</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="nf">MyWritable</span><span class="o">(</span><span class="n">VLongWritable</span> <span class="n">fld1</span><span class="o">,</span> <span class="n">VLongWritable</span> <span class="n">fld2</span><span class="o">){</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">this</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">fld1</span><span class="o">,</span> <span class="n">fld2</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">VLongWritable</span> <span class="n">fld1</span><span class="o">,</span> <span class="n">VLongWritable</span> <span class="n">fld2</span><span class="o">){</span>
</span><span class='line'>		<span class="c1">//make sure the smaller field is always put as field1</span>
</span><span class='line'>		<span class="k">if</span><span class="o">(</span><span class="n">fld1</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;=</span> <span class="n">fld2</span><span class="o">.</span><span class="na">get</span><span class="o">()){</span>
</span><span class='line'>			<span class="k">this</span><span class="o">.</span><span class="na">field1</span> <span class="o">=</span> <span class="n">fld1</span><span class="o">;</span>
</span><span class='line'>			<span class="k">this</span><span class="o">.</span><span class="na">field2</span> <span class="o">=</span> <span class="n">fld2</span><span class="o">;</span>
</span><span class='line'>		<span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>			
</span><span class='line'>			<span class="k">this</span><span class="o">.</span><span class="na">field1</span> <span class="o">=</span> <span class="n">fld2</span><span class="o">;</span>
</span><span class='line'>			<span class="k">this</span><span class="o">.</span><span class="na">field2</span> <span class="o">=</span> <span class="n">fld1</span><span class="o">;</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	
</span><span class='line'>	<span class="c1">//How to write and read MyWritable fields from DataOutput and DataInput stream</span>
</span><span class='line'>	<span class="nd">@Override</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">DataOutput</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">field1</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class='line'>		<span class="n">field2</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="nd">@Override</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">readFields</span><span class="o">(</span><span class="n">DataInput</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>		
</span><span class='line'>		<span class="n">field1</span><span class="o">.</span><span class="na">readFields</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class='line'>		<span class="n">field2</span><span class="o">.</span><span class="na">readFields</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="cm">/** Returns true if &amp;lt;code&amp;gt;o&amp;lt;/code&amp;gt; is a MyWritable with the same values. */</span>
</span><span class='line'>	<span class="nd">@Override</span>
</span><span class='line'>	  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>	    <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">MyWritable</span><span class="o">))</span>
</span><span class='line'>	    	<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>	
</span><span class='line'>	    <span class="n">MyWritable</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">MyWritable</span><span class="o">)</span><span class="n">o</span><span class="o">;</span>
</span><span class='line'>	    <span class="k">return</span> <span class="n">field1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">field1</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">field2</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">field2</span><span class="o">);</span>
</span><span class='line'>	
</span><span class='line'>	  <span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="nd">@Override</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">(){</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">return</span> <span class="n">field1</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">*</span> <span class="mi">163</span> <span class="o">+</span> <span class="n">field2</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="nd">@Override</span>
</span><span class='line'>	<span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">field1</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span> <span class="o">+</span> <span class="n">field2</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>未完待续，下一篇中将介绍Writable对象序列化为字节流时占用的字节长度。</p>

<h4 id="section-1">参考资料</h4>

<p>Tom White, Hadoop: The Definitive Guide, 3rd Edition </p>

<p><code>---To Be Continued---</code></p>

]]></content>
  </entry>
  
</feed>
