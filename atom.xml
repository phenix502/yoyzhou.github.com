<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yoyzhou's Blog]]></title>
  <link href="http://yoyzhou.github.com/atom.xml" rel="self"/>
  <link href="http://yoyzhou.github.com/"/>
  <updated>2012-08-18T19:47:32+08:00</updated>
  <id>http://yoyzhou.github.com/</id>
  <author>
    <name><![CDATA[yoyzhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Python Setuptools/Distribute for Python2 and Python3]]></title>
    <link href="http://yoyzhou.github.com/blog/2012/08/12/install-python-setuptools-slash-distribute-for-both-python2-and-python3/"/>
    <updated>2012-08-12T20:23:00+08:00</updated>
    <id>http://yoyzhou.github.com/blog/2012/08/12/install-python-setuptools-slash-distribute-for-both-python2-and-python3</id>
    <content type="html"><![CDATA[<p>Since <a href="http://pypi.python.org/pypi/setuptools/">Setuptools</a> doesn’t support Python3.* so far, for Python3.* we choose <a href="http://pypi.python.org/pypi/distribute/">Distribute</a>, <em><strong>it is a fork of the Setuptools project.</strong></em></p>

<blockquote><p>Distribute is intended to replace Setuptools as the standard method for working with Python module distributions.</p><footer><strong>@PyPI Distribute</strong> <cite><a href="http://pypi.python.org/pypi/distribute/#disclaimers">pypi.python.org/pypi/distribute/&hellip;</a></cite></footer></blockquote>

<h2 id="install-python-setuptools-with-easyinstall-for-python2">Install python Setuptools with easy_install for Python2.*</h2>

<p>1 Download setuptools from http://pypi.python.org/pypi/setuptools/, select the appropriate OS/version you want.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Install Setuptools(v2.7) install_setuptools.sh</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo sh Downloads/setuptools-0.6c11-py2.7.egg
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Output install_setuptools.sh</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">Processing setuptools-0.6c11-py2.7.egg
</span><span class="line">Copying setuptools-0.6c11-py2.7.egg to /usr/local/lib/python2.7/dist-packages
</span><span class="line">Adding setuptools 0.6c11 to easy-install.pth file
</span><span class="line">Installing easy_install script to /usr/local/bin
</span><span class="line">Installing easy_install-2.7 script to /usr/local/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="install-python-distribute-with-easyinstall-for-python3">Install python Distribute with easy_install for Python3.*</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Install Distribute install_distribute.sh</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">curl -O http://python-distribute.org/distribute_setup.py
</span><span class="line">sudo &lt;python-cmd&gt; distribute_setup.py
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Output install_distribute.sh</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">Adding distribute 0.6.28 to easy-install.pth file
</span><span class="line">Installing easy_install script to /usr/local/bin
</span><span class="line">Installing easy_install-3.2 script to /usr/local/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Note:</strong> Make sure &lt;python-cmd&gt; is a python3.* command, in my PC, Python2.* command is python, while the Python3.* command is python3,  use &lt;python-cmd&gt; –version to check out version of &lt;python-cmd&gt;. </p>

<p>Now per installing 2.* package, using:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Install 2.* Package install_package2.sh</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">easy_install-2.7  &lt;package-name&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>while using</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Install 3.* Package install_package3.sh</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">easy_install-3.2  &lt;package-name&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>to install version 3.* package.</p>

<p>(End)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Fundamentals - Branch: Learning Notes of Pro Git]]></title>
    <link href="http://yoyzhou.github.com/blog/2012/08/11/git-fundamentals-learning-notes-of-pro-git-part2/"/>
    <updated>2012-08-11T16:15:00+08:00</updated>
    <id>http://yoyzhou.github.com/blog/2012/08/11/git-fundamentals-learning-notes-of-pro-git-part2</id>
    <content type="html"><![CDATA[<h2 id="branch">分支(BRANCH)</h2>

<p><span class="pullquote-right" data-pullquote="git中创建分支的操作就像移动指针那么简单，因为git分支的本质是指向commit对象的可变指针。"><br />
理解分支之前再来回顾一下前面所讲到的git与其他版本控制系统的区别<strong>“Git 保存的不是文件差异或者变化量,而只是一系列文件快照”</strong>。就是这个差别使得git分支的实现要比其他版本控制系统要轻松的多，git的分支是<em>“难以置信的轻量级”</em>，分支操作几乎在瞬间完成，而不像其他版本控制系统需要创建一个完整的源代码目录副本，对于大型项目来说需要耗费大量的项目时间。git中创建分支的操作就像移动指针那么简单，因为git分支的本质是指向commit对象的可变指针。      <br />
</span></p>

<p>下面我们介绍git分支的一般操作：  </p>

<h3 id="git-branch-branch-name">git branch &lt;branch-name&gt;</h3>
<p>从当前提交点创建一个新的分支<br />
git branch myBranch  </p>

<h3 id="git-checkout-branch-name">git checkout &lt;branch-name&gt;</h3>
<p>切换当前工作目录到某一分支，当你切换到分支时，git的HEAD指针就指向了你切换到的分支，这样里就能够在另外的分支里工作了，这里HEAD就是标志当前工作分支的一个指针。<br />
git checkout myBranch</p>

<p>有一个快捷的方式创建一个新分支并切换到该分支<br />
git checkout -b myBranch<br />
这条命令就相当于执行了上面两条命令。  </p>

<p>讲完基本的创建分支和检出分支操作之后，将介绍合并(merge)操作。  </p>

<h3 id="git">git中合并有两种方式：快进合并和三方合并</h3>

<p>1 快进合并(Fast Forward): 当你想要并入(merge in)的分支是并进(merge into)分支的直接下游时，git采用快进的合并方式，如：<br />
C0 &lt;&#8211; C1 &lt;&#8211; C2 &lt;&#8211; C3 &lt;&#8211; C4 <br />
                 |               |      <br />
               master           myBranch <br />
当我们打算将myBranch(merge in branch)并入master(merge into branch)分支时，由于myBranch是master的直接下游，git只需将指针直接右移到C4，这就相当于快进了。<br />
具体操作如下：<br />
	git checkout master #切换到master分区
	git meger myBranch #合并myBranch分区到master分区</p>

<p>2 三方合并(Recursive Merge): 当并入分区和并进分区不再是直接的上下游时，即出现了分叉，git将找出两者的共同祖先提交使用三方合并。</p>

<h3 id="section">合并冲突</h3>

<p>合并产生冲突时，git会提示产生冲突的文件，只有冲突解决之后，merge才能完成，实际上是用户手动处理冲突之后提交冲突文件。
<!-- more -->
##分支的管理</p>

<h3 id="git-branch">git branch</h3>

<p>不加任何参数，列出当前所有分支</p>

<h3 id="git-branch--v">git branch -v</h3>

<p>加参数 -v 列出所有分支，并且显示每一个分支最后一次commit的信息</p>

<h3 id="git-branch---merge">git branch –merge</h3>

<p>查看哪些分支已经被并入当前分支</p>

<h3 id="git-branch---no-merge">git branch –no-merge</h3>

<p>查看哪些分支没有并入当前分支</p>

<h3 id="git-branch--d-branch-name">git branch -d &lt;branch-name&gt;</h3>

<p>删除分支,但是当分支包含未被并入的工作时删除分支将导致失败，不过如果你坚信要删除该分支可以使用:<br />
git branch -D &lt;branch-name&gt;</p>

<h2 id="remote-branch">远程分支(Remote Branch)</h2>

<p>远程分支(remote branch)是对远程仓库状态的索引。它们是一些无法移动的本地分支;只有在进行 Git的网络活动时才会更新。远程分支就像是书签,提醒着你上次连接远程仓库时上面各分支的位置。 <br />
远程分支使用<strong>&lt;remote-repos-name&gt;/&lt;remote-branch-name&gt;</strong>来表示，例如常见的远程分支：<strong>origin/master</strong><br />
如果你没有和网络中远程分支进行通讯，本地的远程分支始终指向上一次通讯时的位置，并不能得到更新。进一步，当你的同事更新了远程分支，服务器中的远程分支将是你同事的版本，而你本地的远程分支并没有得到更新！当你需要推送(将在后面讲到)你的工作到服务器时，注意这是服务器中的版本已经发生了改变，你必须先拉取远程分支中的更新到你的本地分支，再进行推送操作。拉取操作我们前面讲过是git fetch &lt;remote-name&gt;。  </p>

<h3 id="push">推送(push)</h3>

<p>要想和其他人分享某个分支,你需要把它推送到一个你拥有写权限的远程仓库。<br />
git push &lt;remote-repos-name&gt; &lt;branch-name&gt;<br />
如果你有个叫funstaff的分支需要和他人一起开发,可以运行：<br />
git push origin funstaff  </p>

<p>这样当你的同伴想要合并你的funstaff分支到当前分支的话，可以使用：<br />
git merge origin/funstaff
或者新建一个分支，独立继续开发： <br />
git checkout -b myFunStaff origin/funstaff</p>

<h3 id="section-1">跟踪分支</h3>
<p>从远程分支检出的本地分支,称为跟踪分支(tracking branch)。在跟踪分支里输入这些分支里运行git push, Git会自行推断应该向哪个服务器的哪个分支推送数据。
上面的列子我们可以使用下面的命令：
git checkout –track origin/funstaff</p>

<h2 id="rebase">衍合(rebase)</h2>

<p>git checkout myBranch<br />
git rebase master<br />
<em>rebase命令,可以把在一个分支里提交的改变在另一个分支里重放一遍。</em><br />
衍合的金科玉律：</p>

<blockquote><p>永远不要衍合那些已经推送到公共仓库的更新。</p></blockquote>

<h2 id="references">References</h2>
<p><a href="http://git-scm.com/2010/06/09/pro-git-zh.html">Pro Git 简体中文版</a>  </p>

<p><a href="http://git-scm.com/book">Pro Git Enlish Edition</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Fundamentals: Learning Note of Pro Git]]></title>
    <link href="http://yoyzhou.github.com/blog/2012/08/09/git-fundamentals-learning-note-of-pro-git/"/>
    <updated>2012-08-09T22:30:00+08:00</updated>
    <id>http://yoyzhou.github.com/blog/2012/08/09/git-fundamentals-learning-note-of-pro-git</id>
    <content type="html"><![CDATA[<h2 id="git">git基础</h2>

<h3 id="git-1">git优点</h3>
<pre><code>1 直接快照,而非比较差异
不像集中式版本管理系统那样只记录不同版本之间的Deta, 而是直接快照整个项目文件，这使得Git更像是一个文件系统

2 近乎所有操作都可本地执行

3 时刻保持数据完整性
通过数据内容校验和计算(checksum)

4 多数操作仅添加数据
</code></pre>

<h3 id="git-2">git配置文件的类型和位置</h3>

<pre><code>/etc/gitconfig 系统级别的git的配置文件 通过 git config --system 选项指定进行配置


～/.gitconfig 用户级别的配置文件 通过 git config --global 选项指定进行配置


.git/config(当前工作项目目录下) 项目级别的配置文件
</code></pre>

<h2 id="git-3">git命令</h2>

<h3 id="git-init">git init</h3>
<p>初始化git仓库</p>

<h3 id="git-status">git status</h3>
<p>查看git repos库状态<br />
status的形式:未跟踪，未修改，修改，暂存<br />
运行了git add之后又作了修订的文件,需要重新运行git add把最新版本重新暂存起来。</p>

<h4 id="git-4">演示git仓库中文件状态的例子</h4>
<pre><code>1.vim &lt;file&gt; -- untracked v0  
2.git add &lt;file&gt; -- tracked &amp; staged v0  
3.git commit -m '' -- version v0  
4.vim &lt;file&gt; -- tracked &amp; modified &amp; staged v0  
5.git add &lt;file&gt; -- tracked &amp; staged v1  
6.vim &lt;file&gt; -- tracked &amp; modified &amp; staged v1  
7.git commit -m '' -- version v1  
</code></pre>

<h3 id="git-diff">git diff</h3>
<p>–查看尚未暂存文件更新了什么，即查看工作目录中当前文件与暂存区快照之间的差异。用上面的例子来说，假设我们在第4步后面执行git diff, 这个命令查看的将是文件&lt;file&gt;在第4步[修改过但是还未暂存]与第3步[Staged v0]的差异  </p>

<h3 id="git-diff---cached--staged">git diff –cached/–staged</h3>
<p>查看已经暂存起来的文件和上次提交时的快照之间的差异。还是用上面的例子，假设我们在第7步后面执行命令git diff –staged，将查看文件&lt;file&gt;在第5步[Staged v1]和第3步[Version v0]之间的变化</p>

<h3 id="git-commit--m-message-for-commit">git commit -m ‘message for commit…’</h3>
<p>在之进行commit之前,一定要确认还有什么修改过的或新建的文件还没有git add过,否则提交的时候不会记录这些还没暂存起来的变化。所以,每次准备提交前,先用下,是不是都已暂存起来了,然后再运行提交命令git status看是不是都已经暂存起来了，然后再执行命令git commit。</p>

<h3 id="git-rm-file">git rm &lt;file&gt;</h3>
<p>Remove file(s) from git’s tracking list, meanwhile delete the file(s)</p>

<h3 id="git-rm---cached-file">git rm –cached &lt;file&gt;</h3>
<p>Remove file(s) from git’s tracking list, but keep file(s) as cached, file(s) will not be removed.</p>

<h3 id="git-mv-filefrom-fileto">git mv file_from file_to</h3>
<p>Move file in git repos, equals to:</p>

<pre><code>1 mv file_from file_to  
2 git rm file_from  
3 git add file_to  
</code></pre>

<h3 id="git-log--options">git log [-options]</h3>
<p>View commit history<br />
-p 展开每一次提交的diffs<br />
-n 仅显示最近n次提交<br />
–stat 显示每次提交的文件修改统计信息<br />
–pretty 指定显示格式，oneline、short、full、fuller和format(后面指定格式)<br />
–since 从什么时间开始<br />
etc. 更多选项请使用 git log –help</p>

<h3 id="git-commit---amend">git commit –amend</h3>
<p>进行重新提交操作，可修改上一次提交的commit comment或者添加忘记staged的更新</p>

<h3 id="git-reset-head-file">git reset HEAD &lt;file&gt;</h3>
<p>撤销对文件&lt;file&gt;的暂存操作，比如你需要对某一个文件进行单独提交时，可以：<br />
	git add . #将所有的文件暂存<br />
	git reset HEAD &lt;file&gt; #撤销对某文件的暂存<br />
	git commit -m ‘commit message’<br />
	git add &lt;file&gt;<br />
	[可能的文件&lt;file&gt;的修改]<br />
	git commit &lt;file&gt; -m ‘commit &lt;file&gt; seperately’  </p>

<h3 id="git-checkout---file">git checkout –&lt;file&gt;</h3>
<p>取消对文件的修改，慎用。此命令将文件恢复到文件修改前的版本/暂存区内容，工作目录中所有对该文件的修改都将丢失。<br />
在git 1.7.9.5中测试可省略“–”直接使用git checkout &lt;file&gt;</p>

<h2 id="git-5">git远程仓库</h2>

<h3 id="git-remote--v">git remote -v</h3>
<p>查看远程库信息 -v选项显示远程库地址<br />
<!-- MORE --></p>

<h3 id="git-remote-add-options-short-name-git-url">git remote add [&lt;options&gt;] &lt;short name&gt; &lt;git url&gt;</h3>

<p>添加一个远程库, &lt;short name&gt; 可以为远程库选一个简短的名字; &lt;git url&gt;远程库的git项目URL, e.g. <br />
	git remote add pb git://github.com/paulboone/ticgit.git    </p>

<h3 id="git-fetch-remote-name">git fetch [remote-name]</h3>
<p>从远程仓库抓取数据，e.g.:
	 git fetch pb #命令会到远程仓库pb中拉取所有你本地仓库中还没有的数据。<br />
注：当你使用 git clone命令克隆一个远程库时，默认会创建一个origin的remote repository，当使用 git fetch origin 实际上是拉取从你上一次clone以来别人传到此远程仓库的所有更新<br />
NOTE：fetch 命令只是将远端的数据拉到本地仓库,并不自动合并到当前工作分支,只有当你确实准备好了,才能手工合并。  </p>

<h3 id="git-push-remote-name-branch-name">git push [remote-name] [branch-name]</h3>
<p>推送数据到远程仓库<br />
[remote-name] 为远程仓库名称，origin或者你使用git remote add 命令添加的远程仓库<br />
[branch-name] 本地分支名称, e.g. <br />
	git push origin master #将本地的master分支推送到origin服务器上  </p>

<h3 id="git-remote-show-remote-name">git remote show &lt;remote-name&gt;</h3>
<p>查看远程仓库的信息, e.g.<br />
	git remote show origin  </p>

<h3 id="git-remote-rename-old-remote-name-new-remote-name">git remote rename &lt;old-remote-name&gt; &lt;new-remote-name&gt;</h3>
<p>重命名远程仓库名称</p>

<h3 id="git-remote-rm-remote-name">git remote rm &lt;remote-name&gt;</h3>
<p>删除远程仓库</p>

<h2 id="git-6">git标签</h2>

<h3 id="git-tag">git tag</h3>
<p>显示当前项目中的所有标签</p>

<h3 id="git-tab--l-expression">git tab -l ‘&lt;expression&gt;’</h3>
<p>显示符合检索表达式的标签，e.g.
git tag -l ‘v1.0.*’</p>

<h3 id="git-tag--a-tag-name--m-tag-message">git tag -a &lt;tag-name&gt; -m ‘tag message’</h3>
<p>新建一个含附注的(annotated)标签, e.g.<br />
git tag -a v1.0.1 -m ‘version 1.0.1’  </p>

<h3 id="git-tag--a-tag-name-checksum">git tag -a &lt;tag-name&gt; &lt;checksum&gt;</h3>
<p>为某一次提交补上标签，提交的检验和可以使用前面的git log进行查看</p>

<h3 id="git-show-tag-name">git show &lt;tag-name&gt;</h3>
<p>显示标签信息<br />
git show v1.0.1</p>

<h3 id="git-push-remote-name-tag-name">git push [remote-name] &lt;tag-name&gt;</h3>
<p>推送/分享某一个标签版本，而不是本地分支<br />
git push origin v1.0.1  </p>

<h2 id="git-">git 使用技巧</h2>

<h3 id="tab">添加tab自动补全功能</h3>
<pre><code>1 clone git源码库  
	git clone git://github.com/git/git.git  
2 cp contrib/completion/git-completion.bash ~/.git-completion.bash  
3 source ~/.git-completion.bash #添加.git-completion.bash到你的.bashrc文件中。
</code></pre>

<p>如果你不想克隆git源码库可以直接从git源码库中下载单个<a href="https://raw.github.com/git/git/master/contrib/completion/git-completion.bash">git-completion.bash</a>文件,再进行复制和source操作。</p>

<h3 id="git-7">添加git命令别名</h3>
<p>e.g.</p>

<pre><code>git config --global alias.co checkout 
git config --global alias.st status  etc.
</code></pre>

<h2 id="references">References</h2>
<p><a href="http://git-scm.com/2010/06/09/pro-git-zh.html">Pro Git 简体中文版</a>  </p>

<p><a href="http://git-scm.com/book">Pro Git Enlish Edition</a></p>

<p>&lt;To be continued…&gt;</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Latex Support for Octopress with kramdown and MathJax]]></title>
    <link href="http://yoyzhou.github.com/blog/2012/08/05/add-latex-support-for-octopress/"/>
    <updated>2012-08-05T15:24:00+08:00</updated>
    <id>http://yoyzhou.github.com/blog/2012/08/05/add-latex-support-for-octopress</id>
    <content type="html"><![CDATA[<blockquote><p>kramdown (sic, not Kramdown or KramDown, just kramdown) is a free GPL-licensed Ruby library for parsing and converting a superset of Markdown.  It is completely written in Ruby, supports standard Markdown.</p><footer><strong>@kramdown</strong> <cite><a href="http://kramdown.rubyforge.org/index.html">kramdown.rubyforge.org/&hellip;</a></cite></footer></blockquote>

<h2 id="install-kramdown">Install kramdown</h2>
<p>First of all make sure you have ruby installed on your box:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ruby --version # or
</span><span class="line">$ which ruby</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If command &ldquo;which ruby&rdquo; returns nothing, then you should install it first.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo apt-cache search ruby # to chech out the available ruby package
</span><span class="line">$ sudo apt-get install ruby[*.*] # to install *.* version of ruby</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Also you can use <a href="https://rvm.io/">RVM</a>, aka Ruby Version Manager, to install/manage your ruby entries, but actually I am not able to install ruby 1.9.2 approperately following the instruction from Octopress site on my PC which is <em>ubuntu 12.04</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Install kramdown  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>sudo gem install kramdown
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="change-configyml-and-gemfile-to-include-kramdown">Change _config.yml and Gemfile to include kramdown</h2>
<p>Change markdown engine to kramdown</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Change markdown engine to kramdown _config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="p-Indicator">[</span><span class="nv">...</span><span class="p-Indicator">]</span>
</span><span class="line"><span class="l-Scalar-Plain">markdown</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kramdown</span>
</span><span class="line"><span class="p-Indicator">[</span><span class="nv">...</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->
<p>Add kramdown to Gemfile</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Add kramdown to Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[...]
</span><span class="line">gem 'pygments.rb', '~&gt; 0.2.12'
</span><span class="line">gem 'kramdown', '~&gt; 0.13'
</span><span class="line">gem 'RedCloth', '~&gt; 4.2.9'
</span><span class="line">[...]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next, install gem dependencies</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">gem install bundler
</span><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="add-mathjaxjs-to-headhtml">Add MathJax.js to head.html</h2>
<p>So far, we have installed kramdown, and attach the dependency of kramdown to project, the last thing we have to do is including MathJax.js to your html head, since by default MathJax.js is not included in html head.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Add MathJax  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">	<span class="nv">$ </span>vim <span class="o">[</span>repo-root<span class="o">]</span>/source/_includes/head.html <span class="c">#where repo-root is the repository root, optional. </span>
</span><span class="line">	<span class="nv">$ </span><span class="c">#add &quot;&lt;script src=&quot;http://kramdown.rubyforge.org/MathJax/MathJax.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&quot; (without quote) to head.html </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="show-cases">Show Cases</h2>
<p>$$
\begin{align}
E &amp; = mc^2 
\end{align}
$$</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
F & = ma 
\end{align}
 %]]&gt;</script>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
e^{i \pi} & = -1
\end{align}
 %]]&gt;</script>

<p>And,</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome]]></title>
    <link href="http://yoyzhou.github.com/blog/2012/08/02/welcome/"/>
    <updated>2012-08-02T22:44:00+08:00</updated>
    <id>http://yoyzhou.github.com/blog/2012/08/02/welcome</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
